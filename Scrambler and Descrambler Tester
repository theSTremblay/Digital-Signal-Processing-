#include "DSP_Config.h" 
#include "coeff.h"	// load the filter coefficients, B[n] ... extern
#include <stdlib.h>	// needed to call the rand() function
  
// Data is received as 2 16-bit words (left/right) packed into one
// 32-bit word.  The union allows the data to be accessed as a single 
// entity when transferring to and from the serial port, but still be 
// able to manipulate the left and right channels independently.

#define LEFT  0
#define RIGHT 1

#define input 1

#define N 2
#define M 1

volatile union {
	Uint32 UINT;
	Int16 Channel[2];
} CodecDataIn, CodecDataOut;


/* add any global variables here */
Int32 counter = 0;
Int32 samplesPerSymbol = 20;
Int32 symbol;
Int32 data[2] = {-15000, 15000};
Int32 cosine[4] = {1, 0, -1, 0};
Int32 i;

float x[8];
float y;
float output;

float B1[N+1] = {1, 2, 1};
float A1[N+1] = {1, -1.561018075800718, 0.641351538057563};
float G1[M+1] = {0.020083365564211, 1};

float x1[N+1] = {0, 0, 0};
float y1[N+1] = {0, 0, 0};

int SSRG_state = 5;

int SSRG_update(int *state_ptr, int in){
	// Calculate Newest Bit
	int BitN;
	int BitNMinusEighteen = ((*state_ptr >> 5) & 1);
	int BitNMinusTwentyThree = ((*state_ptr) & 1);
	int interBit = BitNMinusEighteen ^ BitNMinusTwentyThree;
	BitN = interBit ^ in;

	// Shift Right
	*state_ptr = *state_ptr >> 1;
	*state_ptr = *state_ptr | (BitN << 22);
	//Store_state(state_ptr);
	return BitN;
}

float deModAndFilter(float o){
	// Demodulate Output
	float dmodOutput = 2*o*cosine[counter & 3];

	// Lowpass Filter
	int i = 0;

	x1[0] = dmodOutput*G1[0];
	y1[0] = 0;
	for(i = 0; i < N + 1; i++){			// Compute feedforward terms
		y1[0] += B1[i]*x1[i];
	}

	for(i = 1; i < N + 1; i++){			// Compute feedback terms
		y1[0] -= A1[i]*y1[i];
	}

	for(i = N; i > 0; i--){				// Shift x and y values
		y1[i] = y1[i-1];
		x1[i] = x1[i-1];
	}

	float LPFOutput = y1[0]*G1[1];
	return LPFOutput;
}

interrupt void Codec_ISR()
///////////////////////////////////////////////////////////////////////
// Purpose:   Codec interface interrupt service routine  
//
// Input:     None
//
// Returns:   Nothing
//
// Calls:     CheckForOverrun, ReadCodecData, WriteCodecData
//
// Notes:     None
///////////////////////////////////////////////////////////////////////
{                    
	/* add any local variables here */

 	if(CheckForOverrun())					// overrun error occurred (i.e. halted DSP)
		return;								// so serial port is reset to recover

  	CodecDataIn.UINT = ReadCodecData();		// get input data samples
	
	/* add your code starting here */

	// I added my IM BPSK routine here
    if (counter == 0) {
		symbol = SSRG_update(&SSRG_state, input) & 1; // a faster version of rand() % 2
		x[0] = data[symbol]; // read the table
	}

    // perform impulse modulation based on the FIR filter, B[N] 
    y  = 0;

    for (i = 0; i < 8; i++) {
		y +=  x[i]*B[counter + 20*i];	// perform the dot-product
	}
    
    if (counter == (samplesPerSymbol - 1)) {
    	counter = -1; 

		/* shift x[] in preparation for the next symbol */
 		for (i = 7; i > 0; i--) {
			x[i] = x[i - 1];          // setup x[] for the next input
		}
   	}

   	counter++;

	output = y*cosine[counter & 3];

	CodecDataOut.Channel[LEFT]  = y; // setup the LEFT  value
	CodecDataOut.Channel[RIGHT] = deModAndFilter(output); // setup the RIGHT value
	// end of my IM BPSK routine

	/* end your code here */

	WriteCodecData(CodecDataOut.UINT);		// send output data to  port
}
