
#define LEFT  1
#define RIGHT 0

volatile union {
	Uint32 UINT;
	Int16 Channel[2];
} CodecDataIn, CodecDataOut;


/* add any global variables here */
#define N 2 	// IIR filter order
#define M 3


float B[M][N+1] = {{1,0,-0.999987682472505} , {1,2.00000608540556,1.00000608544259} , {1,-2.00000623215985,1.00000623219869}};  // numerator coefficients
float A[M][N+1] = {{1,-0.369183822565030,0.131652497587396} , {1,0.513934767968438,0.530466396551704} , {1,-1.28027754652456,0.657254439157964}};
float G[M+1] = {0.1085,1,1,1};

float x[M][N+1] = {{0, 0, 0} , {0, 0, 0} , {0, 0, 0}};   // input value (buffered)
float y[M][N+1] = {{0, 0, 0} , {0, 0, 0} , {0, 0, 0}};   // output values (buffered)


void biquad(int biquadIndex){

	int i = 0;
	y[biquadIndex][0] = 0 ;
	for(i = 0; i < N + 1; i++){
		y[biquadIndex][0] += B[biquadIndex][i]*x[biquadIndex][i];
	}

	for(i = 1; i < N + 1; i++){
		y[biquadIndex][0] -= A[biquadIndex][i]*y[biquadIndex][i];
	}

	//shift
	for(i = N; i < 0; i--){
		y[biquadIndex][i] = y[biquadIndex][i-1];
		x[biquadIndex][i] = x[biquadIndex][i-1];
	}
	/*y[biquadIndex][2] = y[biquadIndex][1];
	y[biquadIndex][1] = y[biquadIndex][0];
	x[biquadIndex][2] = x[biquadIndex][1];
	x[biquadIndex][1] = x[biquadIndex][0];*/

	if(biquadIndex < M - 1){
		x[biquadIndex + 1][0] = G[biquadIndex + 1]*y[biquadIndex][0];
	}
}




interrupt void Codec_ISR()
///////////////////////////////////////////////////////////////////////
// Purpose:   Codec interface interrupt service routine  
//
// Input:     None
//
// Returns:   Nothing
//
// Calls:     CheckForOverrun, ReadCodecData, WriteCodecData
//
// Notes:     None
///////////////////////////////////////////////////////////////////////
{                    
	/* add any local variables here */


 	if(CheckForOverrun())					// overrun error occurred (i.e. halted DSP)
		return;								// so serial port is reset to recover

  	CodecDataIn.UINT = ReadCodecData();		// get input data samples
	
	/* I added my IIR filter routine here */
	x[0][0] = CodecDataIn.Channel[LEFT];		// current input value

	x[0][0] = G[0]*x[0][0];

	int index;
	for(index = 0; index < M; index++){
		biquad(index);
	}
	
	CodecDataOut.Channel[LEFT]  = y[M-1][0];		// setup the LEFT value
	/* end of my IIR filter routine	*/

	WriteCodecData(CodecDataOut.UINT);		// send output data to  port
}

